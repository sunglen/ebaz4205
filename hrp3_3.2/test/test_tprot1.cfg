/*
 *		時間パーティショニングに関するテスト(1)のシステムコンフィギュ
 *		レーションファイル
 *
 *  $Id: test_tprot1.cfg 787 2019-10-04 06:41:43Z ertl-hiro $
 */
INCLUDE("tecsgen.cfg");

#include "test_common.h"

DEF_SCY({ 20 * TEST_TIME_CP });
CRE_SOM(SOM1, { TA_INISOM });
ATT_TWD({ DOM1, SOM1, 1, 5 * TEST_TIME_CP });
ATT_TWD({ DOM2, SOM1, 2, 5 * TEST_TIME_CP });

DOMAIN(DOM1) {
	ACV_DOM({ TACP_SHARED, TACP_SHARED, TACP_KERNEL, TACP_SHARED });
	CRE_TSK(TASK1, { TA_ACT, 1, task1, MID_PRIORITY, STACK_SIZE, NULL });
	SAC_TSK(TASK1, { TACP_SHARED, TACP_SHARED, TACP_KERNEL, TACP_SHARED });
}
DOMAIN(DOM2) {
	ACV_DOM({ TACP_SHARED, TACP_SHARED, TACP_KERNEL, TACP_SHARED });
	CRE_TSK(TASK2, { TA_ACT, 1, task2, MID_PRIORITY, STACK_SIZE, NULL });
	SAC_TSK(TASK2, { TACP_SHARED, TACP_SHARED, TACP_KERNEL, TACP_SHARED });
}
DOMAIN(DOM3) {
	ACV_DOM({ TACP_SHARED, TACP_SHARED, TACP_KERNEL, TACP_SHARED });
	CRE_TSK(TASK3, { TA_ACT, 1, task3, MID_PRIORITY, STACK_SIZE, NULL });
	SAC_TSK(TASK3, { TACP_SHARED, TACP_SHARED, TACP_KERNEL, TACP_SHARED });
}
KERNEL_DOMAIN {
	CRE_CYC(CYC1, { TA_STA, { TNFY_HANDLER, 0, cyclic1_handler },
									5 * TEST_TIME_CP, 4 * TEST_TIME_CP });
}
ATT_MOD("test_tprot1.o");

INCLUDE("test_common2.cfg");
