
		TOPPERS/HRP3カーネル
		CT11MPCore依存部 ユーザーズマニュアル

		対応バージョン: Release 3.1
		最終更新: 2019年4月14日

このドキュメントは，TOPPERS/HRP3カーネルのCT11MPCoreターゲット依存部を
使用するために必要な事項を説明するものである．

----------------------------------------------------------------------
 TOPPERS/HRP Kernel
     Toyohashi Open Platform for Embedded Real-Time Systems/
     High Reliable system Profile Kernel

 Copyright (C) 2008-2019 by Embedded and Real-Time Systems Laboratory
             Graduate School of Information Science, Nagoya Univ., JAPAN
 
 上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
     権表示，この利用条件および下記の無保証規定が，そのままの形でソー
     スコード中に含まれていること．
 (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
     用できる形で再配布する場合には，再配布に伴うドキュメント（利用
     者マニュアルなど）に，上記の著作権表示，この利用条件および下記
     の無保証規定を掲載すること．
 (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
     用できない形で再配布する場合には，次のいずれかの条件を満たすこ
     と．
   (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
       作権表示，この利用条件および下記の無保証規定を掲載すること．
   (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
       報告すること．
 (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
     害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
     また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
     由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
     免責すること．
 
 本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 の責任を負わない．
 
 $Id: target_user.txt 717 2019-04-14 00:33:55Z ertl-hiro $
----------------------------------------------------------------------

○目次

１．CT11MPCoreターゲット依存部の概要
	1.1 対応するターゲットシステムとターゲット略称
	1.2 ターゲット依存部の構成
	1.3 依存している個別パッケージのバージョン番号
	1.4 開発環境と動作確認条件
	1.5 メモリマップ
２．ターゲット定義事項の規定
	2.1 割込み優先度と割込み番号
	2.2 オーバランハンドラ機能拡張のサポートに関する規定
３．ドライバ関連の情報
	3.1 タイマドライバ
	3.2 シリアルインタフェースドライバ
	3.3 システムログの低レベル出力
４．システム構築手順と実行手順
	4.1 システム構築
	4.2 デバッガの使用方法
５．リファレンス
	5.1 ディレクトリ構成・ファイル構成
	5.2 バージョン履歴


１．CT11MPCoreターゲット依存部の概要

CT11MPCoreターゲット依存部は，TOPPERS/HRP3カーネルを，ARM11 MPCoreのテ
ストチップを搭載したCoreTile（CT11MPCore）を，RealView Emulation
Baseboard上に実装したターゲットシステムで動作させる環境を構築するための
ものである．

また，実ターゲットシステムに代えて，Qemuを用いて実行することもできる．
Qemuで実行する場合には，コンパイルオプションに「-DTOPPERS_USE_QEMU」を
追加する必要がある．

1.1 対応するターゲットシステムとターゲット略称

CT11MPCoreターゲット依存部の動作確認は，Qemuを用いて行っている．動作確
認を行ったQemuのバージョンは次の通り．

	qemu-system-arm		version 2.7.0

Qemu上で実行するためのコマンドは次の通り．

	qemu-system-arm -M realview-eb-mpcore -semihosting -m 128M \
												-nographic -kernel hrp

ターゲット略称等は次の通り．

	ターゲット略称：ct11mpcore_gcc
	システム略称：ct11mpcore
	開発環境略称：gcc

1.2 ターゲット依存部の構成

CT11MPCoreターゲット依存部の使用するターゲット依存部（targetディレクト
リ）およびターゲット依存部の共通部（archディレクトリ）のディレクトリは
次の通り．

	target/
		ct11mpcore_gcc/		CT11MPCoreターゲット依存部

	arch/
		arm_gcc/common/		ARMコア依存部
		arm_gcc/doc/		ARM依存部に関するドキュメント
		gcc/				GCC開発環境依存部

1.3 依存している個別パッケージのバージョン番号

CT11MPCoreターゲット依存部（バージョン 3.1.0）の個別パッケージが依存し
ている個別パッケージと，動作確認を行ったバージョンは次の通り．

	個別パッケージの名称	バージョン	個別パッケージファイル名
	------------------------------------------------------------------
	ターゲット非依存部		3.1.0		hrp3-3.1.0.tar.gz

1.4 開発環境と動作確認条件

開発環境として，以下のURLからプリビルド版をダウンロードすることができ
るGNU ARM Embedded Toolchainを用いている（Cortex-MとCortex-R向けの開発
環境であるが，Cortex-A向けにも使用できる）．

	https://developer.arm.com/open-source/gnu-toolchain/gnu-rm

動作確認を行ったバージョンは次の通り．

	gcc: 7.3.1 20180622
	gdb: 7.6.0.20140228-cvs
	binutils（objcopy，objdump）：2.30.0.20180329

1.5 メモリマップ

以下のメモリマップを想定している（Qemuの場合）．

	0x00000000 - 0x00001000：リマップされたベクタ領域（4KB）
	0x01000000 - 0x01001000：ベクタ領域（4KB）
	0x01001000 - 0x017FFFFF：ROMとみなすDRAM領域（約8MB）
	0x01800000 - 0x01FFFFFF：RAMとみなすDRAM領域（8MB）
	0x10000000 - 0x100FFFFF：Emulation Baseboard上のリソース（1MB）
	0x10100000 - 0x101FFFFF：Private Memory Region（1MB）

リマップされたベクタ領域には，0x01000000番地からのベクタ領域がマッピン
グされる．

プログラムおよび定数データ領域は，DRAM領域内の0x01001000番地から約8MB
に置く想定として，（定数でない）データ領域は，その後に配置する．

MPCoreのPrivate Memory Regionの先頭番地は，コア外部から設定可能となって
いる．Qemuでは，この領域の先頭番地は，0x10100000に設定されている．実際
のターゲットシステムでは，ボード上で設定できるようになっており，デフォ
ルトでは0x1f000000に設定されている．

メモリマップを変更する場合には，target_mem.cfgを修正する必要がある．


２．ターゲット定義事項の規定

CT11MPCoreターゲット依存部は，ARMコア依存部とMPCoreチップ依存部（GIC依
存部を含む）を用いて実装されている．ARMコア依存部およびMPCoreチップ依
存部におけるターゲット定義事項の規定については，「ARM依存部 ユーザーズ
マニュアル」を参照すること．

以下では，ARMコア依存部およびMPCoreチップ依存部と異なる，ないしは，それ
らで規定されていない事項について説明する．

2.1 割込み優先度と割込み番号

CT11MPCoreの割込みコントローラ（Distributed Interrupt Controller）は，
GICとほぼ互換であり，16レベルの割込み優先度をサポートしている．そのた
め，割込み優先度の最小値（最高値）は-15，割込み優先度の最大値（最低値）
は-1である．

CT11MPCoreの割込みコントローラがサポートする割込みと，その割込み番号は
次の通り．

	プロセッサ間割込み			0〜15
	プライベート割込み			16〜31
		プライベートタイマ			29
		プライベートウォッチドッグ	30
		レガシーnIRQ				31
	ハードウェア割込み			32〜63
	  チップ外からの割込み		  32〜47
		ACCI						32
		EB_TIMER0/1					33
		EB_TIMER2/3					34
		USB							35
		EB_UART0					36
		EB_UART1					37
		…中略…
		EB_GIC1_nIRQ				42
		EB_GIC2_nIRQ				43
		EB_GIC1_nFIQ				44
		EB_GIC2_nFIQ				45
		…中略…
	  チップ内の割込み		  48〜63

2.2 オーバランハンドラ機能拡張のサポートに関する規定

オーバランハンドラ機能拡張パッケージをサポートしている．


３．ドライバ関連の情報

3.1 タイマドライバ

高分解能タイマは，MPCoreがコア毎に持つプライベートタイマとプライベート
ウォッチドッグを使用して実現している．具体的には，ウォッチドッグを現在
時刻の管理のために用い，タイマを相対時間割込みの発生のために用いている．
また，タイムウィンドウタイマは，RealView Emulation Baseboard上のFPGAに
実装されているタイマの内の1つを用いている．

オーバランハンドラ機能をサポートするためには，タイマの数が足りなくなる．
そこで，時間パーティショニングとオーバランハンドラを同時に使用すること
はできないという制約を設け，オーバランタイマを，タイムウィンドウタイマ
と同じタイマを用いて実現している．

3.2 シリアルインタフェースドライバ

シリアルインタフェースドライバでは，RealView Emulation Baseboard上の
FPGAに実装されている4チャンネルのUARTをサポートしている．

サンプルプログラムが用いるSIOポートを変更する場合には，sample1.cdlと
target.cdlを修正して用いるSIOポートを変更するか，
tSIOPortCT11MPCore.cdlを修正してSIOポート名の割付けを変更すれば良い．

3.3 システムログの低レベル出力

システムログの低レベル出力は，シリアルインタフェースドライバが用いてい
るのと同じUARTを用い，ポーリングにより文字を出力する方法で実現している．

用いるSIOポートを変更する場合には，target.cdlを修正して用いるSIOポート
を変更するか，tSIOPortCT11MPCore.cdlを修正してSIOポート名の割付けを変
更すれば良い．


４．システム構築手順と実行手順

4.1 システム構築

CT11MPCore用のHRP3カーネルを構築する手順は，「TOPPERS/HRP3カーネル ユー
ザーズマニュアル」の「３．クイックスタートガイド」の章に記述されている
通りである．Qemuで実行する場合には，コンパイルオプションに
「-DTOPPERS_USE_QEMU」を追加すること．

4.2 Qemuで実行する場合のデバッガの使用方法

Qemuで実行する場合，GDBデバッガを用いて実行することができる．まず，
Qemuを実行する際に，オプション「-S -gdb tcp::1234」を付ける．具体的には，
次のコマンドによる実行する．

	qemu-system-arm -M realview-eb-mpcore -semihosting -m 128M \
								-nographic -S -gdb tcp::1234 -kernel hrp

Qemuを実行したのとは別のウィンドウで，GDBを起動する．

	% arm-none-eabi-gdb hrp
	<GDBの起動メッセージ>
	(gdb) target remote localhost:1234
	(gdb) 

ここで，「target remote localhost:1234」は，TCPを用いてQemuとGDBを接続
するためのコマンドである．このコマンドを，.gdbinitに設定しておくと便利
である．

また，条件付きブレークポイントを使うと，特定のタスクが特定のアドレスを
実行した場合にのみ実行を停止させることができる．ただし，ブレーク条件を
記述するには，カーネルの内部構造を知っていることが必要である．


５．リファレンス

5.1 ディレクトリ構成・ファイル構成

	target/ct11mpcore_gcc/
		E_PACKAGE				簡易パッケージのファイルリスト
		MANIFEST				個別パッケージのファイルリスト
		Makefile.target			Makefileのターゲット依存部
		ct11mpcore.h			ターゲットのハードウェア資源の定義
		sp804.h					ARM Dual-Timer Module（SP804）に関する定義
		tSIOPortCT11MPCore.cdl	シリアルインタフェースドライバのターゲット
								依存部（CT11MPCore用）のコンポーネント記述
		tSIOPortCT11MPCoreMain_inline.h		シリアルインタフェースドライバ
								のターゲット依存部（CT11MPCore用）
		target.cdl				コンポーネント記述ファイルのターゲット依存部
		target_cfg1_out.h		cfg1_out.cのリンクに必要なスタブの定義
		target_check.trb		kernel_check.trbのターゲット依存部
		target_kernel.cfg		カーネル実装のコンフィギュレーションファイル
		target_kernel.h			kernel.hのターゲット依存部
		target_kernel.trb		kernel.trbのターゲット依存部
		target_kernel_impl.c	カーネル実装のターゲット依存部
		target_kernel_impl.h	カーネル実装のターゲット依存部に関する定義
		target_mem.cfg			ターゲットのメモリ構成の定義
		target_mem.trb			パス4の生成スクリプトのターゲット依存部
		target_opt.trb			パス3の生成スクリプトのターゲット依存部
		target_rename.def		ターゲット依存部の内部識別名のリネーム定義
		target_rename.h			ターゲット依存部の内部識別名のリネーム
		target_sil.h			sil.hのターゲット依存部
		target_stddef.h			t_stddef.hのターゲット依存部
		target_svc.h			ソフトウェア割込みによるサービスコール呼
								出しのターゲット依存部
		target_syssvc.h			システムサービスのターゲット依存定義
		target_test.h			テストプログラムのターゲット依存定義
		target_timer.c			タイマドライバ
		target_timer.cfg		タイマドライバのコンフィギュレーションファイル
		target_timer.h			タイマドライバを使用するための定義
		target_unrename.h		ターゲット依存部の内部識別名のリネーム解除
		target_user.txt			ターゲット依存部のユーザーズマニュアル

5.2 バージョン履歴

	2016年3月14日	Release	3.B.0		最初の早期リリース（β版）
	2018年4月20日	Release 3.0.0		最初の一般公開
	2019年3月20日	Release 3.1.0

以上
