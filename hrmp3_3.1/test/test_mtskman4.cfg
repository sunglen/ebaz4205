/*
 *		マルチプロセッサ対応のタスク管理機能のテスト(2)のシステムコン
 *		フィギュレーションファイル
 *
 *  $Id: test_mtskman4.cfg 273 2019-01-10 08:02:34Z ertl-hiro $
 */

INCLUDE("test_common1.cfg");

#include "test_common.h"

DEF_SCY({ 20 * TEST_TIME_CP });
CRE_SOM(SOM1, { TA_INISOM });
CLASS(CLS_ALL_PRC1) {
	ATT_TWD({ DOM1, SOM1, 1, 10 * TEST_TIME_CP });
}
CLASS(CLS_PRC2) {
	ATT_TWD({ DOM2, SOM1, 2, 5 * TEST_TIME_CP });
}

DOMAIN(DOM1) {
  CLASS(CLS_PRC1) {
	CRE_TSK(TASK1, { TA_ACT, 1, task1, MID_PRIORITY, STACK_SIZE, NULL });
  }
  CLASS(CLS_ALL_PRC2) {
	CRE_TSK(TASK2, { TA_NULL, 2, task2, HIGH_PRIORITY, STACK_SIZE, NULL });
  }
}
DOMAIN(DOM2) {
  CLASS(CLS_ALL_PRC2) {
	CRE_TSK(TASK3, { TA_NOACTQUE, 3, task3, HIGH_PRIORITY, STACK_SIZE, NULL });
	SAC_TSK(TASK3, { TACP(DOM1), TACP(DOM1), TACP_KERNEL, TACP(DOM1) });
  }
}
KERNEL_DOMAIN {
  SAC_SYS({ TACP(DOM1), TACP(DOM1), TACP_KERNEL, TACP(DOM1) });
  CLASS(CLS_ALL_PRC1) {
	CRE_TSK(TASK4, { TA_NULL, 4, task4, HIGH_PRIORITY, STACK_SIZE, NULL });
	SAC_TSK(TASK4, { TACP(DOM1), TACP(DOM1), TACP_KERNEL, TACP(DOM1) });
  }
  CLASS(CLS_PRC1) {
	CRE_ALM(ALM1, { TA_NULL, { TNFY_HANDLER, 1, alarm1_handler }});
	SAC_ALM(ALM1, { TACP(DOM1), TACP(DOM1), TACP_KERNEL, TACP(DOM1) });
  }
}
ATT_MOD("test_mtskman4.o");

INCLUDE("test_common2.cfg");
