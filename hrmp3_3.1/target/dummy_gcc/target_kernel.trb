# -*- coding: utf-8 -*-
#
#   TOPPERS/HRMP Kernel
#       Toyohashi Open Platform for Embedded Real-Time Systems/
#       High Reliable Multiprocessing Profile Kernel
# 
#   Copyright (C) 2015 by FUJI SOFT INCORPORATED, JAPAN
#   Copyright (C) 2015-2019 by Embedded and Real-Time Systems Laboratory
#               Graduate School of Information Science, Nagoya Univ., JAPAN
# 
#   上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
#   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
#   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
#   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
#       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
#       スコード中に含まれていること．
#   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
#       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
#       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
#       の無保証規定を掲載すること．
#   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
#       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
#       と．
#     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
#         作権表示，この利用条件および下記の無保証規定を掲載すること．
#     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
#         報告すること．
#   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
#       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
#       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
#       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
#       免責すること．
# 
#   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
#   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
#   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
#   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
#   の責任を負わない．
# 
#   $Id: target_kernel.trb 643 2019-12-09 16:43:08Z ertl-hiro $
# 

# 
#		パス2の生成スクリプトのターゲット依存部（ダミーターゲット用）
#

#
#  クラスのリスト
#
$globalVars.push("clsData")

case $TNUM_PRCID
when 1
  $clsData = {
    1 => { clsid: NumStr.new(1, "CLS_PRC1"),
           initPrc: 1, affinityPrcList: [ 1 ] },
    5 => { clsid: NumStr.new(5, "CLS_ALL_PRC1"),
           initPrc: 1, affinityPrcList: [ 1 ] },
  }

when 2
  $clsData = {
    1 => { clsid: NumStr.new(1, "CLS_PRC1"),
           initPrc: 1, affinityPrcList: [ 1 ] },
    2 => { clsid: NumStr.new(2, "CLS_PRC2"),
           initPrc: 2, affinityPrcList: [ 2 ] },
    5 => { clsid: NumStr.new(5, "CLS_ALL_PRC1"),
           initPrc: 1, affinityPrcList: [ 1,2 ] },
    6 => { clsid: NumStr.new(6, "CLS_ALL_PRC2"),
           initPrc: 2, affinityPrcList: [ 1,2 ] },
  }

when 3
  $clsData = {
    1 => { clsid: NumStr.new(1, "CLS_PRC1"),
           initPrc: 1, affinityPrcList: [ 1 ] },
    2 => { clsid: NumStr.new(2, "CLS_PRC2"),
           initPrc: 2, affinityPrcList: [ 2 ] },
    3 => { clsid: NumStr.new(3, "CLS_PRC3"),
           initPrc: 3, affinityPrcList: [ 3 ] },
    5 => { clsid: NumStr.new(5, "CLS_ALL_PRC1"),
           initPrc: 1, affinityPrcList: [ 1,2,3 ] },
    6 => { clsid: NumStr.new(6, "CLS_ALL_PRC2"),
           initPrc: 2, affinityPrcList: [ 1,2,3 ] },
    7 => { clsid: NumStr.new(7, "CLS_ALL_PRC3"),
           initPrc: 3, affinityPrcList: [ 1,2,3 ] },
  }

when 4
  $clsData = {
    1 => { clsid: NumStr.new(1, "CLS_PRC1"),
           initPrc: 1, affinityPrcList: [ 1 ] },
    2 => { clsid: NumStr.new(2, "CLS_PRC2"),
           initPrc: 2, affinityPrcList: [ 2 ] },
    3 => { clsid: NumStr.new(3, "CLS_PRC3"),
           initPrc: 3, affinityPrcList: [ 3 ] },
    4 => { clsid: NumStr.new(4, "CLS_PRC4"),
           initPrc: 4, affinityPrcList: [ 4 ] },
    5 => { clsid: NumStr.new(5, "CLS_ALL_PRC1"),
           initPrc: 1, affinityPrcList: [ 1,2,3,4 ] },
    6 => { clsid: NumStr.new(6, "CLS_ALL_PRC2"),
           initPrc: 2, affinityPrcList: [ 1,2,3,4 ] },
    7 => { clsid: NumStr.new(7, "CLS_ALL_PRC3"),
           initPrc: 3, affinityPrcList: [ 1,2,3,4 ] },
    8 => { clsid: NumStr.new(8, "CLS_ALL_PRC4"),
           initPrc: 4, affinityPrcList: [ 1,2,3,4 ] },
  }
end

#
#  使用できる割込み番号とそれに対応する割込みハンドラ番号
# 
$INTNO_VALID = {}
$INHNO_VALID = {}
private_intno_list = [ *(0..31) ]
global_intno_list = [ *(32..63) ]
1.upto($TNUM_PRCID) do |prcid|
  $INTNO_VALID[prcid] = []
  $INHNO_VALID[prcid] = []
  private_intno_list.each do |intno|
    $INTNO_VALID[prcid].push((prcid << 16) | intno)
    $INHNO_VALID[prcid].push((prcid << 16) | intno)
  end
  global_intno_list.each do |intno|
    $INTNO_VALID[prcid].push(intno)
    $INHNO_VALID[prcid].push((prcid << 16) | intno)
  end
end

#
#  CFG_INTで使用できる割込み優先度
#
#  カーネル管理外の割込み用に，TMIN_INTPRI-1を使えるようにする．
#
$INTPRI_CFGINT_VALID = ($TMIN_INTPRI-1).upto($TMAX_INTPRI).to_a

#
#  カーネル管理／カーネル管理外に固定の割込み番号／割込みハンドラ番号
#
$INTNO_FIX_KERNEL = []
$INHNO_FIX_KERNEL = []
$INTNO_FIX_NONKERNEL = []
$INHNO_FIX_NONKERNEL = []
1.upto($TNUM_PRCID) do |prcid|
  $INTNO_FIX_KERNEL.push((prcid << 16) | 30)
  $INHNO_FIX_KERNEL.push((prcid << 16) | 30)
  $INTNO_FIX_NONKERNEL.push((prcid << 16) | 31)
  $INHNO_FIX_NONKERNEL.push((prcid << 16) | 31)
end

# 
#  使用できるCPU例外ハンドラ番号
# 
$EXCNO_VALID = {}
excno_list = [ *(0..7) ]
1.upto($TNUM_PRCID) do |prcid|
  $EXCNO_VALID[prcid] = []
  excno_list.each do |excno|
    $EXCNO_VALID[prcid].push((prcid << 16) | excno)
  end
end

#
#  保護ドメイン初期化コンテキストブロック
#

# カーネルドメインの保護ドメイン初期化コンテキストブロック
$kernelDominictxb = "{ 0 }"

# 保護ドメイン初期化コンテキストブロックの生成
def GenerateDominictxb(key, params)
  return("{ 0 }")
end

#
#  スタートアップモジュールの定義
# 
$START_OBJS = [ "start.o" ]

#
#  コンパイラが必ず用いるライブラリの定義
# 
$TARGET_LIBS = [ "libgcc.a" ]

# 
#  標準のセクションの定義
#
$defaultSections = [
  { SECNAME: ".text",   MEMREG: :stdrom, MEMATR: $mematrTextSec },
  { SECNAME: ".rodata", MEMREG: :stdrom, MEMATR: $mematrRodataSec },
  { SECNAME: ".data",   MEMREG: :stdram, MEMATR: $mematrDataSec },
  { SECNAME: ".bss",    MEMREG: :stdram, MEMATR: $mematrBssSec },
  { SECNAME: ".noinit", MEMREG: :stdram, MEMATR: $mematrNoinitSec }
]

#
#  ATT_SECで登録できないセクション名の定義
#
$targetStandardSecnameList = [ "COMMON", ".system_stack" ]
$clsData.each do |_, params|
  $targetStandardSecnameList.push(".kernel_data_#{params[:clsid]}")
  $targetStandardSecnameList.push(".system_stack_#{params[:clsid]}")
end

#
#  配置するセクションを指定した変数定義の生成
#
def DefineVariableSection(genFile, defvar, secname)
  if secname != ""
    genFile.add("#{defvar} __attribute__((section(\"#{secname}\"),nocommon));")
  else
    genFile.add("#{defvar};")
  end
end

#
#  カーネルのデータ領域のセクション名
#
def SecnameKernelData(cls)
  if cls != $TCLS_NONE
    return(".kernel_data_#{$clsData[cls][:clsid]}")
  else
    return("")
  end
end

#
#  システムスタック領域のセクション名
#
def SecnameSystemStack(cls)
  if cls != $TCLS_NONE
    return(".system_stack_#{$clsData[cls][:clsid]}")
  else
    return("")
  end
end

#
#  ユーザスタック領域のセクション名と確保方法
#
def SecnameUserStack(tskid)
  return(".ustack_#{tskid}")
end

def AllocUserStack(stack, size, secname)
  ustksz = (size + $CHECK_USTKSZ_ALIGN - 1) & ~($CHECK_USTKSZ_ALIGN - 1)
  DefineVariableSection($kernelCfgC, \
					"static STK_T #{stack}[COUNT_STK_T(#{ustksz})]", secname)
  return("ROUND_STK_T(#{ustksz})")
end

# レッドゾーン方式におけるダミースタック領域の確保
def AllocDummyUserStack(stack, size, secname)
  # staticを付けると，コンパイラが，この変数を参照していないという警告
  # を出し，場合によっては変数を削除するため，staticを付けない．
  ustksz = (size + $CHECK_USTKSZ_ALIGN - 1) & ~($CHECK_USTKSZ_ALIGN - 1)
  DefineVariableSection($kernelCfgC, \
					"STK_T #{stack}[COUNT_STK_T(#{ustksz})]", secname)
end

#
#  固定長メモリプール領域のセクション名
#
def SecnameUserMempfix(mpfid)
  return(".mpf_#{mpfid}")
end

#
#  ネイティブスピンロックの生成
#
def GenerateNativeSpn(params)
  $kernelCfgC.add("LOCK _kernel_lock_#{params[:spnid]};")
  return("((intptr_t) &_kernel_lock_#{params[:spnid]})")
end

#
#  ターゲット依存のメモリオブジェクト情報の操作
#
def TargetMemoryObject()
  if $TOPPERS_ML_AUTO
    $clsData.each do |key, params|
      # カーネルドメインに「.kernel_data_<クラス名>」セクションを登録する．
      params2 = {}
      params2[:type] = :ATTSEC
      params2[:linker] = true
      params2[:domain] = $TDOM_KERNEL
      params2[:class] = key
      params2[:memreg] = $standardMemreg[key][$TDOM_KERNEL][:stdram]
      params2[:secname] = ".kernel_data_#{params[:clsid]}"
      params2[:mematr] = $mematrNoinitSec
      params2[:acptn1] = $defaultAcptn[$TDOM_KERNEL]
      params2[:acptn2] = $defaultAcptn[$TDOM_KERNEL]
      params2[:acptn4] = $defaultAcptn[$TDOM_KERNEL]
      $memObj[$lastMOKey += 1] = params2
    end

    $clsData.each do |key, params|
      # カーネルドメインに「.system_stack_<クラス名>」セクションを登録する．
      params2 = {}
      params2[:type] = :ATTSEC
      params2[:linker] = true
      params2[:domain] = $TDOM_KERNEL
      params2[:class] = key
      params2[:memreg] = $standardMemreg[key][$TDOM_KERNEL][:stdram]
      params2[:secname] = ".system_stack_#{params[:clsid]}"
      if defined?($targetMematrSstack)
        params2[:mematr] = $targetMematrSstack
      else
        params2[:mematr] = $mematrNoinitSec
      end
      params2[:acptn1] = $defaultAcptn[$TDOM_KERNEL]
      params2[:acptn2] = $defaultAcptn[$TDOM_KERNEL]
      params2[:acptn4] = $defaultAcptn[$TDOM_KERNEL]
      $memObj[$lastMOKey += 1] = params2
    end
  end
end

#
#  ターゲット非依存部のインクルード
#
IncludeTrb("kernel/kernel.trb")

if $TOPPERS_ML_AUTO
  #
  #  自動メモリ配置の場合
  #

  #
  #  仮のリンカスクリプトの生成
  #
  $ldscript = GenFile.new("cfg2_out.ld")
  $modnameReplace = { "kernel_mem.o" => "kernel_mem2.o" }
  IncludeTrb("target_ldscript.trb")
else
  #
  #  手動メモリ配置の場合
  #

  #
  #  メモリ保護単位に関する情報を生成する
  #
  GenerateMemProt()
end
