# -*- coding: utf-8 -*-
#
#   TOPPERS/HRMP Kernel
#       Toyohashi Open Platform for Embedded Real-Time Systems/
#       High Reliable Multiprocessing Profile Kernel
# 
#   Copyright (C) 2015 by FUJI SOFT INCORPORATED, JAPAN
#   Copyright (C) 2015-2019 by Embedded and Real-Time Systems Laboratory
#               Graduate School of Information Science, Nagoya Univ., JAPAN
# 
#   上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
#   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
#   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
#   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
#       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
#       スコード中に含まれていること．
#   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
#       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
#       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
#       の無保証規定を掲載すること．
#   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
#       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
#       と．
#     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
#         作権表示，この利用条件および下記の無保証規定を掲載すること．
#     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
#         報告すること．
#   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
#       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
#       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
#       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
#       免責すること．
# 
#   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
#   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
#   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
#   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
#   の責任を負わない．
# 
#   $Id: core_kernel.trb 801 2020-06-26 06:50:46Z ertl-hiro $
# 

#
#		パス2の生成スクリプトのコア依存部（ARM用）
#

#
#  有効なCPU例外ハンドラ番号
#
$EXCNO_VALID = {}
excno_list = [ 0, 1, 2, 3, 4, 5, 6, 7 ]
1.upto($TNUM_PRCID) do |prcid|
  $EXCNO_VALID[prcid] = []
  excno_list.each do |excno|
    $EXCNO_VALID[prcid].push((prcid << 16) | excno)
  end
end

#
#  DEF_EXCで使用できるCPU例外ハンドラ番号
#
$EXCNO_DEFEXC_VALID = {}
excno_list = [ 0, 1, 2, 3, 5, 6, 7 ]
1.upto($TNUM_PRCID) do |prcid|
  $EXCNO_DEFEXC_VALID[prcid] = []
  excno_list.each do |excno|
    $EXCNO_DEFEXC_VALID[prcid].push((prcid << 16) | excno)
  end
end

#
#  保護ドメイン初期化コンテキストブロック
#

# カーネルドメインの保護ドメイン初期化コンテキストブロック
$kernelDominictxb = "{ 0 }"

# 保護ドメイン初期化コンテキストブロックの生成
def GenerateDominictxb(key, params)
  return("{ _kernel_section_table[INDEX_DOM(#{params[:domid]})] }")
end

#
#  スタートアップモジュールの定義
# 
$START_OBJS = [ "start.o" ]

#
#  コンパイラが必ず用いるライブラリの定義
# 
$TARGET_LIBS = [ "libgcc.a" ]

# 
#  標準のセクションの定義
#
$defaultSections = [
  { SECNAME: ".text",   MEMREG: :stdrom, MEMATR: $mematrTextSec },
  { SECNAME: ".rodata", MEMREG: :stdrom, MEMATR: $mematrRodataSec },
  { SECNAME: ".data",   MEMREG: :stdram, MEMATR: $mematrDataSec },
  { SECNAME: ".bss",    MEMREG: :stdram, MEMATR: $mematrBssSec },
  { SECNAME: ".noinit", MEMREG: :stdram, MEMATR: $mematrNoinitSec }
]

#
#  ATT_SECで登録できないセクション名の定義
#
$targetStandardSecnameList = [ "COMMON" ]
$clsData.each do |_, params|
  $targetStandardSecnameList.push(".system_stack_#{params[:clsid]}")
  $targetStandardSecnameList.push(".kernel_data_#{params[:clsid]}")
end
$targetStandardSecnameList.push(".page_table", ".shared_code")

#
#  配置するセクションを指定した変数定義の生成
#
def DefineVariableSection(genFile, defvar, secname)
  if secname != ""
    genFile.add("#{defvar} __attribute__((section(\"#{secname}\"),nocommon));")
  else
    genFile.add("#{defvar};")
  end
end

#
#  カーネルのデータ領域のセクション名
#
def SecnameKernelData(cls)
  if cls != $TCLS_NONE
    return(".kernel_data_#{$clsData[cls][:clsid]}")
  else
    return("")
  end
end

#
#  システムスタック領域のセクション名
#
def SecnameSystemStack(cls)
  if cls != $TCLS_NONE
    return(".system_stack_#{$clsData[cls][:clsid]}")
  else
    return("")
  end
end

#
#  ユーザスタック領域のセクション名と確保
#
def SecnameUserStack(tskid)
  return(".ustack_#{tskid}")
end

def AllocUserStack(stack, size, secname)
  ustksz = (size + $CHECK_USTKSZ_ALIGN - 1) & ~($CHECK_USTKSZ_ALIGN - 1)
  DefineVariableSection($kernelCfgC, \
					"static STK_T #{stack}[COUNT_STK_T(#{ustksz})]", secname)
  return("ROUND_STK_T(#{ustksz})")
end

# レッドゾーン方式におけるダミースタック領域の確保
def AllocDummyUserStack(stack, size, secname)
  # staticを付けると，コンパイラが，この変数を参照していないという警告
  # を出し，場合によっては変数を削除するため，staticを付けない．
  ustksz = (size + $CHECK_USTKSZ_ALIGN - 1) & ~($CHECK_USTKSZ_ALIGN - 1)
  DefineVariableSection($kernelCfgC, \
					"STK_T #{stack}[COUNT_STK_T(#{ustksz})]", secname)
end

#
#  固定長メモリプール領域のセクション名
#
def SecnameUserMempfix(mpfid)
  return(".mpf_#{mpfid}")
end

#
#  ネイティブスピンロックの生成
#
def GenerateNativeSpn(params)
  $kernelCfgC.add("LOCK _kernel_lock_#{params[:spnid]};")
  return("((intptr_t) &_kernel_lock_#{params[:spnid]})")
end

#
#  ATT_REGに関するターゲット依存のエラーチェック
#
def TargetCheckRegion(params)
  # baseがメモリ保護境界の制約に合致していない場合（E_PAR）
  if (params[:base] & ($ARM_PAGE_SIZE - 1)) != 0
    error_ercd("E_PAR", params, \
					"%%base in %apiname is not aligned to the page size")
  end

  # sizeがメモリ保護境界の制約に合致していない場合（E_PAR）
  if (params[:size] & ($ARM_PAGE_SIZE - 1)) != 0
    error_ercd("E_PAR", params, \
					"%%size in %apiname is not aligned to the page size")
  end
end

#
#  ATT_SECに関するターゲット依存のエラーチェック
#
def TargetCheckSection(params)
  # リンクオンリーセクション以外で，mematrにTA_NOREADを指定した場合（警告）
  if (params[:mematr] & ($TA_NOREAD|$TA_NOWRITE|$TA_EXEC)) \
										  != ($TA_NOREAD|$TA_NOWRITE) \
		&& (params[:mematr] & $TA_NOREAD) != 0
    warning_api(params,
			"mematr `TA_NOREAD' in %apiname is ignored on this target")
    params[:mematr] = NumStr.new(params[:mematr] & ~($TA_NOREAD))
  end

  #	アクセス許可ベクタで，書込みが許可，読出しが禁止の場合（警告）
  if (params.has_key?(:acptn1) && (params[:acptn1] & ~(params[:acptn2])) != 0)
    warning_api(params, "write only memory object registered with %apiname " \
											"is not supported on this target")
  end
end

#
#  ATT_MEM／ATT_PMAに関するターゲット依存のエラーチェック
#
def TargetCheckMemory(params)
  # リンクオンリーセクション以外で，accatrにTA_NOREADを指定した場合（警告）
  if (params[:accatr] & ($TA_NOREAD|$TA_NOWRITE|$TA_EXEC)) \
										  != ($TA_NOREAD|$TA_NOWRITE) \
		&& (params[:accatr] & $TA_NOREAD) != 0
    warning_api(params,
			"accatr `TA_NOREAD' in %apiname is ignored on this target")
    params[:accatr] = NumStr.new(params[:accatr] & ~($TA_NOREAD))
  end

  # baseがメモリ保護境界の制約に合致していない場合（E_PAR）［NGKI2880］
  if $TOPPERS_ML_MANUAL
    if (params[:base] & ($ARM_PAGE_SIZE - 1)) != 0
      error_ercd("E_PAR", params, \
					"%%base in %apiname is not aligned to the page size")
    end
  end

  # sizeがメモリ保護境界の制約に合致していない場合（E_PAR）［NGKI2880］
  if (params[:size] & ($ARM_PAGE_SIZE - 1)) != 0
    error_ercd("E_PAR", params, \
					"%%size in %apiname is not aligned to the page size")
  end

  # paddrがメモリ保護境界の制約に合致していない場合（E_PAR）［NGKI2900］
  if (params.has_key?(:paddr) && (params[:paddr] & ($ARM_PAGE_SIZE - 1)) != 0)
    error_ercd("E_PAR", params, \
					"%%paddr in %apiname is not aligned to the page size")
  end

  #	アクセス許可ベクタで，書込みが許可，読出しが禁止の場合（警告）
  if (params.has_key?(:acptn1) && (params[:acptn1] & ~(params[:acptn2])) != 0)
    warning_api(params, "write only memory object registered with %apiname " \
											"is not supported on this target")
  end
end

#
#  ターゲット依存のメモリオブジェクト情報の操作
#
def TargetMemoryObject()
  if $TOPPERS_ML_AUTO
    $clsData.each do |key, params|
      # カーネルドメインに「.kernel_data_<クラス名>」セクションを登録する．
      params2 = {}
      params2[:type] = :ATTSEC
      params2[:linker] = true
      params2[:domain] = $TDOM_KERNEL
      params2[:class] = key
      params2[:memreg] = $standardMemreg[key][$TDOM_KERNEL][:stdram]
      params2[:secname] = ".kernel_data_#{params[:clsid]}"
      params2[:mematr] = $mematrNoinitSec
      params2[:acptn1] = $defaultAcptn[$TDOM_KERNEL]
      params2[:acptn2] = $defaultAcptn[$TDOM_KERNEL]
      params2[:acptn4] = $defaultAcptn[$TDOM_KERNEL]
      $memObj[$lastMOKey += 1] = params2
    end

    $clsData.each do |key, params|
      # カーネルドメインに「.system_stack_<クラス名>」セクションを登録する．
      params2 = {}
      params2[:type] = :ATTSEC
      params2[:linker] = true
      params2[:domain] = $TDOM_KERNEL
      params2[:class] = key
      params2[:memreg] = $standardMemreg[key][$TDOM_KERNEL][:stdram]
      params2[:secname] = ".system_stack_#{params[:clsid]}"
      if defined?($targetMematrSstack)
        params2[:mematr] = $targetMematrSstack
      else
        params2[:mematr] = $mematrNoinitSec
      end
      params2[:acptn1] = $defaultAcptn[$TDOM_KERNEL]
      params2[:acptn2] = $defaultAcptn[$TDOM_KERNEL]
      params2[:acptn4] = $defaultAcptn[$TDOM_KERNEL]
      $memObj[$lastMOKey += 1] = params2
    end

    # カーネルドメインに.page_tableセクションを登録する．
    params = {}
    params[:type] = :ATTSEC
    params[:linker] = true
    params[:domain] = $TDOM_KERNEL
    params[:class] = $TCLS_NONE
    params[:memreg] = $standardMemreg[$TCLS_NONE][$TDOM_KERNEL][:stdrom]
    params[:secname] = ".page_table"
    params[:mematr] = $mematrRodataSec
    params[:acptn1] = $defaultAcptn[$TDOM_KERNEL]
    params[:acptn2] = $defaultAcptn[$TDOM_KERNEL]
    params[:acptn4] = $defaultAcptn[$TDOM_KERNEL]
    $memObj[$lastMOKey += 1] = params

    # 無所属に.shared_codeセクションを登録する．
    params = {}
    params[:type] = :ATTSEC
    params[:linker] = true
    params[:domain] = $TDOM_NONE
    params[:class] = $TCLS_NONE
    params[:memreg] = $standardMemreg[$TCLS_NONE][$TDOM_NONE][:stdrom]
    params[:secname] = ".shared_code"
    params[:mematr] = $mematrTextSec
    params[:acptn1] = $defaultAcptn[$TDOM_NONE]
    params[:acptn2] = $defaultAcptn[$TDOM_NONE]
    params[:acptn4] = $defaultAcptn[$TDOM_NONE]
    $memObj[$lastMOKey += 1] = params
  end
end

#
#  ターゲット非依存部のインクルード
#
IncludeTrb("kernel/kernel.trb")

#
#  割込みハンドラテーブル
#
$kernelCfgC.comment_header("Interrupt Handler Table")

1.upto($TNUM_PRCID) do |prcid|
  $kernelCfgC.add("const FP _kernel_inh_table_prc#{prcid}" \
									"[#{$INHNO_VALID[prcid].size}] = {")
  $INHNO_VALID[prcid].each_with_index do |inhnoVal, index|
    $kernelCfgC.add(",") if index > 0
    $kernelCfgC.append("\t/* 0x#{sprintf("%05x", inhnoVal)} */ ")
    if $cfgData[:DEF_INH].has_key?(inhnoVal)
      $kernelCfgC.append("(FP)(#{$cfgData[:DEF_INH][inhnoVal][:inthdr]})")

      # チェックパス用にインデックス値を格納
      $cfgData[:DEF_INH][inhnoVal][:index] = index
    else
      $kernelCfgC.append("(FP)(_kernel_default_int_handler)")
    end
  end
  $kernelCfgC.add
  $kernelCfgC.add2("};")
end

$kernelCfgC.add("const FP* const _kernel_p_inh_table[TNUM_PRCID] = {")
1.upto($TNUM_PRCID) do |prcid|
  $kernelCfgC.add(",") if prcid > 1
  $kernelCfgC.append("\t_kernel_inh_table_prc#{prcid}")
end
$kernelCfgC.add
$kernelCfgC.add2("};")

#
#  割込み要求ライン設定テーブル
#
if $USE_INTCFG_TABLE
  $kernelCfgC.comment_header("Interrupt Configuration Table")
  1.upto($TNUM_PRCID) do |prcid|
    $kernelCfgC.add("const uint8_t _kernel_intcfg_table_prc#{prcid}" \
									"[#{$INTNO_VALID[prcid].size}] = {")
    $INTNO_VALID[prcid].each_with_index do |intnoVal, index|
      $kernelCfgC.add(",") if index > 0
      $kernelCfgC.append("\t/* 0x#{sprintf("%05x", intnoVal)} */ ")
      if $cfgData[:CFG_INT].has_key?(intnoVal)
        $kernelCfgC.append("1U")
      else
        $kernelCfgC.append("0U")
      end
    end
    $kernelCfgC.add
    $kernelCfgC.add2("};")
  end
end

$kernelCfgC.add("const uint8_t* const _kernel_p_intcfg_table[TNUM_PRCID] = {")
1.upto($TNUM_PRCID) do |prcid|
  $kernelCfgC.add(",") if prcid > 1
  $kernelCfgC.append("\t_kernel_intcfg_table_prc#{prcid}")
end
$kernelCfgC.add
$kernelCfgC.add2("};")

#
#  CPU例外ハンドラテーブル
#
$kernelCfgC.comment_header("CPU Exception Handler Table")

1.upto($TNUM_PRCID) do |prcid|
  $kernelCfgC.add("const FP _kernel_exc_table_prc#{prcid}" \
									"[#{$EXCNO_VALID[prcid].size}] = {")
  $EXCNO_VALID[prcid].each_with_index do |excnoVal, index|
    $kernelCfgC.add(",") if index > 0
    $kernelCfgC.append("\t/* 0x#{sprintf("%05x", excnoVal)} */ ")
    if ($cfgData[:DEF_EXC].has_key?(excnoVal))
      $kernelCfgC.append("(FP)(#{$cfgData[:DEF_EXC][excnoVal][:exchdr]})")

      # チェックパス用にインデックス値を格納
      $cfgData[:DEF_EXC][excnoVal][:index] = index
    else
      $kernelCfgC.append("(FP)(_kernel_default_exc_handler)")
    end
  end
  $kernelCfgC.add
  $kernelCfgC.add2("};")
end

$kernelCfgC.add("const FP* const _kernel_p_exc_table[TNUM_PRCID] = {")
1.upto($TNUM_PRCID) do |prcid|
  $kernelCfgC.add(",") if prcid > 1
  $kernelCfgC.append("\t_kernel_exc_table_prc#{prcid}")
end
$kernelCfgC.add
$kernelCfgC.add2("};")

if $TOPPERS_ML_AUTO
  #
  #  自動メモリ配置の場合
  #

  #
  #  仮アドレス変換テーブルの生成
  #

  # ドメイン毎に確保しておくページテーブル数の計算
  $globalVars.push("maxNumPageTable")
  $maxNumPageTable = 0
  prev_limitsec = 0
  $cfgData[:ATT_REG].sort_by {|_, params| params[:base].val}.each do |_, params|
    basesec = params[:base] / $ARM_SECTION_SIZE
    limitsec = (params[:base] + params[:size] + $ARM_SECTION_SIZE - 1) \
													/ $ARM_SECTION_SIZE
    if prev_limitsec < basesec
      $maxNumPageTable += (limitsec - basesec)
    else
      $maxNumPageTable += (limitsec - prev_limitsec)
    end
    prev_limitsec = limitsec
  end
  $maxNumPageTable += $cfgData[:ATT_MEM].size * 2

  # 仮アドレス変換テーブルの生成
  if $udomainList.empty?
    # ユーザドメインが存在しない場合
    numSectionTable = "1"
  else
    # ユーザドメインが存在する場合
    numSectionTable = "TNUM_DOMID"
    $maxNumPageTable *= $udomainList.size
  end

  $kernelMemC.add(<<EOS)
#ifndef ARM_PAGE_TABLE_RATIO
#define ARM_PAGE_TABLE_RATIO	100
#endif /* ARM_PAGE_TABLE_RATIO */

#ifndef ARM_PAGE_TABLE_NUM
#define ARM_PAGE_TABLE_NUM		((#{$maxNumPageTable} * ARM_PAGE_TABLE_RATIO + 99) / 100)
#endif /* ARM_PAGE_TABLE_NUM */

const uint32_t _kernel_section_table[#{numSectionTable}][ARM_SECTION_TABLE_ENTRY] __attribute__((aligned(ARM_SECTION_TABLE_ALIGN),section(".page_table"),nocommon)) = {{ 0U }};

const uint32_t _kernel_page_table[ARM_PAGE_TABLE_NUM][ARM_PAGE_TABLE_ENTRY] __attribute__((aligned(ARM_PAGE_TABLE_ALIGN),section(".page_table"),nocommon)) = {{ 0U }};
EOS

  #
  #  仮のリンカスクリプトの生成
  #
  $ldscript = GenFile.new("cfg2_out.ld")
  $modnameReplace = { "kernel_mem.o" => "kernel_mem2.o" }
  IncludeTrb("core_ldscript.trb")
else
  #
  #  手動メモリ配置の場合
  #

  #
  #  メモリ保護単位に関する情報を生成する
  #
  GenerateMemProt()

  #
  #  アドレス変換テーブルの作成
  #
  IncludeTrb("arm_mmu.trb")
end
