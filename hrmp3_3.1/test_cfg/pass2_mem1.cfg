/*
 *		メモリオブジェクト関連の静的APIのパス2でのエラー検出のテスト(1)
 *
 *  $Id: pass2_mem1.cfg 645 2019-12-09 16:50:28Z ertl-hiro $
 */

#include "cfg_common.h"

/* regatrが無効［NGKI2800］*/
ATT_REG("RAM1", { 0x100U, 0x02000000, 0x00800000 });

/* sizeが0［NGKI2816］*/
ATT_REG("RAM2", { TA_NULL, 0x02800000, 0 });

/* baseやsizeに，ターゲット定義の制約に合致しない先頭番地やサイズを */
/* 指定した時（base+sizeがアドレスの上限を超える場合）［NGKI2815］*/
ATT_REG("RAM3", { TA_NULL, 0xff800000, 0x00900000 });

/* 登録済みのメモリリージョンの再登録［NGKI2801］*/
ATT_REG("RAM1", { TA_NULL, 0x04000000, 0x00800000 });

/* 登録しようとしたメモリリージョンが，登録済みのメモリリージョンと */
/* メモリ領域が重なる場合［NGKI2817］*/
ATT_REG("RAM4", { TA_NULL, 0x01100000, 0x00100000 });

/* 標準メモリリージョンが定義済み［NGKI3263］*/
DEF_SRG("ROM", "RAM");

DOMAIN(DOM1) {
	/* stdromに指定したメモリリージョンが未登録［NGKI3264］*/
	DEF_SRG("ROM0", "RAM");
}

DOMAIN(DOM2) {
	/* stdramに指定したメモリリージョンが未登録［NGKI3264］*/
	DEF_SRG("ROM", "RAM0");
}

DOMAIN(DOM3) {
	/* stdsromに指定したメモリリージョンが未登録［NGKI3264］*/
	DEF_SRG("ROM", "RAM", "ROM0", "RAM");
}

DOMAIN(DOM4) {
	/* stdsromに指定したメモリリージョンが未登録［NGKI3264］*/
	DEF_SRG("ROM", "RAM", "ROM", "RAM0");
}

DOMAIN(DOM5) {
	/* 標準RAMリージョンとして指定したメモリリージョンが，TA_NOWRITE属 */
	/* 性である場合［NGKI3270］*/
	DEF_SRG("ROM", "ROM");
}

DOMAIN(DOM6) {
	/* 標準ショートRAMリージョンとして指定したメモリリージョンが，*/
	/* TA_NOWRITE属性である場合［NGKI3270］*/
	DEF_SRG("ROM", "RAM", "ROM", "ROM");
}

KERNEL_DOMAIN {
	CLASS(CLS_PRC1) {
		CRE_TSK(TASK1, { TA_NULL, 1, task1, MID_PRIORITY, STACK_SIZE, NULL });
	}

	/* 登録済みのオブジェクトモジュールの再登録［NGKI2848］*/
	ATT_MOD("test_attmod1.o");
	ATT_MOD("test_attmod1.o");

	/* mematrが無効［NGKI2820］*/
	ATT_SEC(".text_kernel_add1", { 0x100U, "ROM" });

	/* regnameで指定したメモリリージョンがTA_NOWRITE属性である場合で，*/
	/* mematrにTA_NOWRITEを指定しなかった場合［NGKI5058］*/
	ATT_SEC(".text_kernel_add2", { TA_NULL, "ROM" });

	/* regnameで指定したメモリリージョンがTA_NOWRITE属性である場合で，*/
	/* TA_MEMINIを指定した場合［NGKI5059］*/
	ATT_SEC(".text_kernel_add3", { TA_NOWRITE|TA_MEMINI, "ROM" });

	/* regnameで指定したメモリリージョンがTA_NOWRITE属性である場合で，*/
	/* TA_MEMZEROを指定した場合［NGKI5059］*/
	ATT_SEC(".text_kernel_add4", { TA_NOWRITE|TA_MEMZERO, "ROM" });

	/* mematrにTA_MEMINIとTA_MEMZEROの両方を指定した場合［NGKI2828］*/
	ATT_SEC(".data_kernel_add5", { TA_MEMINI|TA_MEMZERO, "RAM" });

	/* セクション名として，ターゲット定義の予約セクションを指定した場 */
	/* 合［NGKI5129］*/
	ATT_SEC("COMMON", { TA_BSSSEC, "RAM" });

	/* ATT_MODがサポートされているターゲットで，セクション名として，標 */
	/* 準のセクションを指定した場合［NGKI2834］*/
	ATT_SEC(".text", { TA_TEXTSEC, "ROM" });
	ATT_SEC(".rodata", { TA_RODATASEC, "ROM" });
	ATT_SEC(".data", { TA_DATASEC, "RAM" });
	ATT_SEC(".bss", { TA_BSSSEC, "RAM" });

	/* 登録済みのセクションの再登録［NGKI2821］*/
	ATT_SEC(".text_kernel_add1", { TA_TEXTSEC, "ROM" });

	/* 指定したメモリリージョンが未登録［NGKI2822］*/
	ATT_SEC(".text_kernel_add6", { TA_TEXTSEC, "ROM0" });

	/* accatrが無効［NGKI2867］*/
	ATT_MEM({ 0x100U, 0xf0000000, 0x01000000 });
	ATT_MEM({ TA_SDATA, 0xf1000000, 0x01000000 });
	ATT_MEM({ TA_MEMINI, 0xf2000000, 0x01000000 });
	ATT_MEM({ TA_MEMZERO, 0xf3000000, 0x01000000 });

	/* sizeが0［NGKI2881］*/
	ATT_MEM({ TA_NULL, 0xf4000000, 0x00000000 });

	/* accatrが無効［NGKI3889］*/
	ATT_PMA({ 0x100U, 0xe0000000, 0x01000000, 0xf0000000 });
	ATT_PMA({ TA_SDATA, 0xe1000000, 0x01000000, 0xf1000000 });
	ATT_PMA({ TA_MEMINI, 0xe2000000, 0x01000000, 0xf2000000 });
	ATT_PMA({ TA_MEMZERO, 0xe3000000, 0x01000000, 0xf3000000 });

	/* sizeが0［NGKI2901］*/
	ATT_PMA({ TA_NULL, 0xe4000000, 0x00000000, 0xf4000000 });
}

DOMAIN(DOM1) {
  CLASS(CLS_PRC1) {
	CRE_TSK(TASK2, { TA_NULL, 2, task2, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_MPF(MPF1, { TA_NULL, 10, 100, NULL, NULL });

	ATT_SEC(".ustack_TASK2", { TA_NULL });
	ATT_SEC(".mpf_MPF1", { TA_NULL });
  }
}
