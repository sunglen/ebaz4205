/*
 *		静的APIが適切なドメインの囲みの中に記述されていないエラー検出
 *		のテスト(1)
 *
 *  $Id: pass2_dom1.cfg 645 2019-12-09 16:50:28Z ertl-hiro $
 */

#include "cfg_common.h"

DOMAIN(DOM1) {
  CLASS(CLS_PRC1) {
	/*
	 *  エラーにならない静的API（SAC_XXXのテスト用）
	 */
	CRE_TSK(TASK1, { TA_NULL, 1, task1, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_SEM(SEM1, { TA_NULL, 1, 1 });
	CRE_FLG(FLG1, { TA_NULL, 0x00U });
	CRE_DTQ(DTQ1, { TA_NULL, 10, NULL });
	CRE_PDQ(PDQ1, { TA_NULL, 10, 16, NULL });
	CRE_MTX(MTX1, { TA_NULL });
	CRE_MBF(MBF1, { TA_NULL, 10, TSZ_MBFMB(10,10), NULL });
	CRE_MPF(MPF1, { TA_NULL, 10, 10, NULL, NULL });
	CRE_CYC(CYC1, { TA_NULL, { TNFY_ACTTSK, TASK1 }, 1000, 1000 });
	CRE_ALM(ALM1, { TA_NULL, { TNFY_ACTTSK, TASK1 }});

	/*
	 *  ユーザドメインの囲みの中に記述するとエラーになる静的API
	 *
	 *  SAC_SYS，DEF_SCY，DEF_ICSは複数記述できないため，ここからは除く．
	 */

	/* 属する保護ドメインがユーザドメインで，通知方法にタイムイベントハ */
	/* ンドラの呼出しを指定［NGKI3695］*/
	CRE_CYC(CYC2, { TA_NULL, { TNFY_HANDLER, 2, cyclic2_handler },
														1000, 1000 });
	CRE_ALM(ALM2, { TA_NULL, { TNFY_HANDLER, 2, alarm2_handler }});

	/* カーネルドメインの囲みの中に記述されていない［NGKI2989］*/
	CFG_INT(INTNO1, { TA_NULL, TMAX_INTPRI });
	CFG_INT(INTNO3, { TA_NULL, TMAX_INTPRI });

	/* カーネルドメインの囲みの中に記述されていない［NGKI3000］*/
	CRE_ISR(ISR1, { TA_NULL, 1, INTNO3, isr1, 1 });

	/* カーネルドメインの囲みの中に記述されていない［NGKI3070］*/
	DEF_INH(INHNO1, { TA_NULL, int1_handler });

	/* カーネルドメインの囲みの中に記述されていない［NGKI3143］*/
	DEF_EXC(CPUEXC1, { TA_NULL, cpuexc1_handler });

	/* 保護ドメインの囲みの中に記述されている［NGKI5041］*/
	ATT_TWD({ DOM1, SOM1, 1, 4000 });

	/* カーネルドメインの囲みの中に記述されていない［NGKI3242］*/
	ATT_INI({ TA_NULL, 1, initialize1_routine });

	/* カーネルドメインの囲みの中に記述されていない［NGKI3249］*/
	ATT_TER({ TA_NULL, 1, terminate1_routine });
  }

  /* 保護ドメインの囲みの中に記述されている［NGKI2814］*/
  ATT_REG("REG1", { TA_NULL, 0x80000000, 0x10000000 });

  /* カーネルドメインの囲みの中に記述されていない［NGKI3183］*/
  DEF_SVC(1, { TA_NULL, extended_svc1, 100 });

  /* 保護ドメインの囲みの中に記述されている［NGKI5022］*/
  CRE_SOM(SOM1, { TA_INISOM, SOM1 });
}

CLASS(CLS_PRC1) {
	/*
	 *  エラーにならない静的API（SAC_XXXのテスト用）
	 */
	CRE_SEM(SEM2, { TA_NULL, 1, 1 });
	CRE_FLG(FLG2, { TA_NULL, 0x00U });
	CRE_DTQ(DTQ2, { TA_NULL, 10, NULL });
	CRE_PDQ(PDQ2, { TA_NULL, 10, 16, NULL });
	CRE_MTX(MTX2, { TA_NULL });
	CRE_MBF(MBF2, { TA_NULL, 10, TSZ_MBFMB(10,10), NULL });
	CRE_MPF(MPF2, { TA_NULL, 10, 10, NULL, NULL });
}

KERNEL_DOMAIN {
  CLASS(CLS_PRC1) {
	/*
	 *  CRE_XXXと異なるドメインの囲みの中に記述するとエラーになる静的API
	 */

	/* 対象タスクが属する保護ドメインの囲みの中に記述されていない［NGKI1083］*/
	SAC_TSK(TASK1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象セマフォが属する保護ドメインの囲みの中に記述されていない */
	/* ［NGKI1478］*/
	SAC_SEM(SEM1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象セマフォが無所属の場合に，SAC_SEMが保護ドメインの囲みの外に */
	/* 記述されていない［NGKI1478］*/
	SAC_SEM(SEM2, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象イベントフラグが属する保護ドメインの囲みの中に記述されていな */
	/* い［NGKI1581］*/
	SAC_FLG(FLG1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象イベントフラグが無所属の場合に，SAC_FLGが保護ドメインの囲み */
	/* の外に記述されていない［NGKI1581］*/
	SAC_FLG(FLG2, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象データキューが属する保護ドメインの囲みの中に記述されていない */
	/* ［NGKI1698］*/
	SAC_DTQ(DTQ1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象データキューが無所属の場合に，SAC_DTQが保護ドメインの囲みの */
	/* 外に記述されていない［NGKI1698］*/
	SAC_DTQ(DTQ2, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象優先度データキューが属する保護ドメインの囲みの中に記述されて */
	/* いない［NGKI1835］*/
	SAC_PDQ(PDQ1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象優先度データキューが無所属の場合に，SAC_PDQが保護ドメインの */
	/* 囲みの外に記述されていない［NGKI1835］*/
	SAC_PDQ(PDQ2, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象ミューテックスが属する保護ドメインの囲みの中に記述されていな */
	/* い［NGKI2047］*/
	SAC_MTX(MTX1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象ミューテックスが無所属の場合に，SAC_MTXが保護ドメインの囲み */
	/* の外に記述されていない［NGKI2047］*/
	SAC_MTX(MTX2, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象メッセージバッファが属する保護ドメインの囲みの中に記述されて */
	/* いない［NGKI3336］*/
	SAC_MBF(MBF1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象メッセージバッファが無所属の場合に，SAC_MBFが保護ドメインの */
	/* 囲みの外に記述されていない［NGKI3336］*/
	SAC_MBF(MBF2, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象固定長メモリプールが属する保護ドメインの囲みの中に記述されて */
	/* いない［NGKI2267］*/
	SAC_MPF(MPF1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象固定長メモリプールが無所属の場合に，SAC_MPFが保護ドメインの */
	/* 囲みの外に記述されていない［NGKI2267］*/
	SAC_MPF(MPF2, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象周期通知が属する保護ドメインの囲みの中に記述されていない */
	/* ［NGKI3732］*/
	SAC_CYC(CYC1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 対象アラーム通知が属する保護ドメインの囲みの中に記述されていない */
	/* ［NGKI3740］*/
	SAC_ALM(ALM1, { TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

	/* 保護ドメインの囲みの中に記述されている［NGKI5041］*/
	ATT_TWD({ DOM1, SOM2, 1, 5000 });
  }

  /*
   *  カーネルドメインの囲みの中に記述するとエラーになる静的API
   */

  /* 保護ドメインの囲みの中に記述されている［NGKI2814］*/
  ATT_REG("REG2", { TA_NULL, 0x90000000, 0x10000000 });

  /* 保護ドメインの囲みの中に記述されている［NGKI5013］*/
  DEF_SCY({ 10000 });

  /* 保護ドメインの囲みの中に記述されている［NGKI5022］*/
  CRE_SOM(SOM2, { TA_NULL, SOM1 });
}

/*
 *  ドメインの囲みの中に記述しないとエラーになる静的API
 */
CLASS(CLS_PRC1) {
	/* 保護ドメインの囲みの中に記述されていない［NGKI1030］*/
	CRE_TSK(TASK2, { TA_NULL, 2, task2, MID_PRIORITY, STACK_SIZE, NULL });

	/* 保護ドメインの囲みの中に記述されていない［NGKI3741］*/
	CRE_CYC(CYC3, { TA_NULL, { TNFY_ACTTSK, TASK1 }, 1000, 1000 });
	CRE_CYC(CYC4, { TA_NULL, { TNFY_HANDLER, 4, cyclic4_handler },
															1000, 1000 });

	/* 保護ドメインの囲みの中に記述されていない［NGKI3742］*/
	CRE_ALM(ALM3, { TA_NULL, { TNFY_ACTTSK, TASK1 }});
	CRE_ALM(ALM4, { TA_NULL, { TNFY_HANDLER, 4, alarm4_handler }});

	/* カーネルドメインの囲みの中に記述されていない［NGKI2989］*/
	CFG_INT(INTNO2, { TA_NULL, TMAX_INTPRI });
	CFG_INT(INTNO4, { TA_NULL, TMAX_INTPRI });

	/* カーネルドメインの囲みの中に記述されていない［NGKI3000］*/
	CRE_ISR(ISR2, { TA_NULL, 2, INTNO4, isr2, 1 });

	/* カーネルドメインの囲みの中に記述されていない［NGKI3070］*/
	DEF_INH(INHNO2, { TA_NULL, int2_handler });

	/* カーネルドメインの囲みの中に記述されていない［NGKI3143］*/
	DEF_EXC(CPUEXC2, { TA_NULL, cpuexc2_handler });

	/* カーネルドメインの囲みの中に記述されていない［NGKI3213］*/
	DEF_ICS({ 10 * STACK_SIZE, istack });

	/* カーネルドメインの囲みの中に記述されていない［NGKI3242］*/
	ATT_INI({ TA_NULL, 2, initialize2_routine });

	/* カーネルドメインの囲みの中に記述されていない［NGKI3249］*/
	ATT_TER({ TA_NULL, 2, terminate2_routine });

	/* 通知方法にタイムイベントハンドラの呼出しを指定［NGKI3695］*/
	ATT_TWD({ DOM1, SOM1, 2, 4000, { TNFY_HANDLER, 0, twd_handler }});
}

/* カーネルドメインの囲みの中に記述されていない［NGKI2674］*/
SAC_SYS({ TACP_KERNEL, TACP_KERNEL, TACP_KERNEL, TACP_KERNEL });

/* カーネルドメインの囲みの中に記述されていない［NGKI3183］*/
DEF_SVC(2, { TA_NULL, extended_svc2, 100 });
