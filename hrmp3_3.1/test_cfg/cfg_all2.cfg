/*
 *		全静的APIのテスト(2)
 *
 *  ユーザドメインを1つのみを使用した状態で，使用可能な全静的APIをテス
 *  トする．カーネルドメインの囲みの中にしか記述できない静的
 *  API（CFG_INT，CRE_ISR，DEF_INH，DEF_EXC，DEF_SVC，SAC_SYS，
 *  DEF_ICS，ATT_INI，ATT_TER）は除く．
 *
 *  $Id: cfg_all2.cfg 819 2020-07-20 14:02:42Z ertl-hiro $
 */

#include "cfg_common.h"

//	== target_mem.cfg ==
//	ATT_REG("ROM", { TA_NOWRITE, 0x01000000, 0x00800000 });
//	ATT_REG("RAM", { TA_NULL, 0x01800000, 0x00800000 });
//	DEF_SRG("ROM", "RAM");
//
//	== target_timer.cfg ==
//	4つのプロセッサに対して，高分解能タイマドライバとタイムウィンドウ
//	タイマドライバのための，初期化ルーチン，終了処理ルーチン，割込みハ
//	ンドラの登録を行う．
//
//	== target_ipi.cfg ==
//	4つのプロセッサに対して，ディスパッチ要求，カーネル終了要求，高分
//	解能タイマ設定要求，システム周期開始要求の各プロセッサ間割込みの登
//	録を行う．

DOMAIN(DOM1) {
  CLASS(CLS_PRC1) {
	CRE_TSK(TASK1, { TA_ACT, 1, task1, MID_PRIORITY, STACK_SIZE, NULL });
	CRE_TSK(TASK2, { TA_NULL, 2, task2, HIGH_PRIORITY, STACK_SIZE, NULL,
													STACK_SIZE, stack_TASK2 });
	SAC_TSK(TASK2, { TACP_SHARED, TACP(DOM1), TACP(DOM1), TACP_SHARED });
	CRE_SEM(SEM1, { TA_NULL, 1, 1 });
	CRE_SEM(SEM2, { TA_TPRI, 0, 2 });
	SAC_SEM(SEM2, { TACP_SHARED, TACP(DOM1), TACP(DOM1), TACP_SHARED });
	CRE_FLG(FLG1, { TA_NULL, 0U });
	CRE_FLG(FLG2, { TA_TPRI, 0x0001U });
	SAC_FLG(FLG2, { TACP_SHARED, TACP(DOM1), TACP(DOM1), TACP_SHARED });
	CRE_DTQ(DTQ1, { TA_NULL, 10, NULL });
	CRE_DTQ(DTQ2, { TA_TPRI, 0, NULL });
	SAC_DTQ(DTQ2, { TACP_SHARED, TACP(DOM1), TACP(DOM1), TACP_SHARED });
	CRE_PDQ(PDQ1, { TA_NULL, 10, 16, NULL });
	CRE_PDQ(PDQ2, { TA_TPRI, 0, 2, NULL });
	SAC_PDQ(PDQ2, { TACP_SHARED, TACP(DOM1), TACP(DOM1), TACP_SHARED });
	CRE_MTX(MTX1, { TA_NULL });
	CRE_MTX(MTX2, { TA_CEILING, MID_PRIORITY });
	SAC_MTX(MTX2, { TACP_SHARED, TACP(DOM1), TACP(DOM1), TACP_SHARED });
	CRE_MBF(MBF1, { TA_NULL, 10, TSZ_MBFMB(10,10), NULL });
	CRE_MBF(MBF2, { TA_NULL, 20, TSZ_MBFMB(20,20), NULL });
	SAC_MBF(MBF2, { TACP_SHARED, TACP(DOM1), TACP(DOM1), TACP_SHARED });
	CRE_MPF(MPF1, { TA_NULL, 10, 100, NULL, NULL });
	CRE_MPF(MPF2, { TA_NULL, 20, 200, mpf_MPF2, NULL });
	SAC_MPF(MPF2, { TACP_SHARED, TACP(DOM1), TACP(DOM1), TACP_SHARED });
	CRE_CYC(CYC2, { TA_STA, { TNFY_SETVAR, &nvar1, 1 }, 1000, 1000 });
	SAC_CYC(CYC2, { TACP_SHARED, TACP(DOM1), TACP(DOM1), TACP_SHARED });
	CRE_CYC(CYC3, { TA_NULL, { TNFY_INCVAR, &nvar2 }, 1000, 1000 });
	CRE_CYC(CYC4, { TA_NULL, { TNFY_ACTTSK|TENFY_ACTTSK, TASK1, TASK2 },
															1000, 1000 });
	CRE_CYC(CYC5, { TA_NULL, { TNFY_WUPTSK|TENFY_WUPTSK, TASK1, TASK2 },
															1000, 1000 });
	CRE_CYC(CYC6, { TA_NULL, { TNFY_SIGSEM|TENFY_SIGSEM, SEM1, SEM2 },
															1000, 1000 });
	CRE_CYC(CYC7, { TA_NULL, { TNFY_SETFLG|TENFY_SETFLG, FLG1, 0x01,
												FLG1, 0x02 }, 1000, 1000 });
	CRE_CYC(CYC8, { TA_NULL, { TNFY_SNDDTQ|TENFY_SNDDTQ, DTQ1, 0x00, DTQ2 },
															1000, 1000 });
	CRE_CYC(CYC9, { TA_NULL, { TNFY_ACTTSK|TENFY_SETVAR, TASK1, &nvar1 },
															1000, 1000 });
	CRE_CYC(CYC10, { TA_NULL, { TNFY_ACTTSK|TENFY_INCVAR, TASK1, &nvar2 },
															1000, 1000 });
	CRE_ALM(ALM2, { TA_NULL, { TNFY_SETVAR, &nvar1, 1 }});
	SAC_ALM(ALM2, { TACP_SHARED, TACP(DOM1), TACP(DOM1), TACP_SHARED });
	CRE_ALM(ALM3, { TA_NULL, { TNFY_INCVAR, &nvar2 }});
	CRE_ALM(ALM4, { TA_NULL, { TNFY_ACTTSK|TENFY_ACTTSK, TASK1, TASK2 }});
	CRE_ALM(ALM5, { TA_NULL, { TNFY_WUPTSK|TENFY_WUPTSK, TASK1, TASK2 }});
	CRE_ALM(ALM6, { TA_NULL, { TNFY_SIGSEM|TENFY_SIGSEM, SEM1, SEM2 }});
	CRE_ALM(ALM7, { TA_NULL, { TNFY_SETFLG|TENFY_SETFLG, FLG1, 0x01,
															FLG1, 0x02 }});
	CRE_ALM(ALM8, { TA_NULL, { TNFY_SNDDTQ|TENFY_SNDDTQ, DTQ1, 0x00, DTQ2 }});
	CRE_ALM(ALM9, { TA_NULL, { TNFY_ACTTSK|TENFY_SETVAR, TASK1, &nvar1 }});
	CRE_ALM(ALM10, { TA_NULL, { TNFY_ACTTSK|TENFY_INCVAR, TASK1, &nvar2 }});
	ATT_SEC(".text_DOM1_add1", { TA_TEXTSEC, "ROM" });
	ATT_SEC(".text_DOM1_add2", { TA_TEXTSEC, "ROM" },
					{ TACP_SHARED, TACP(DOM1), TACP(DOM1), TACP_SHARED });
	ATT_SEC(".bss_DOM1_add1", { TA_BSSSEC, "RAM" });
	ATT_SEC(".bss_DOM1_add2", { TA_BSSSEC, "RAM" },
					{ TACP_SHARED, TACP(DOM1), TACP(DOM1), TACP_SHARED });
	ATT_SEC(".noinit_DOM1", { TA_NOINITSEC, "RAM" });
	ATT_MOD("cfg_all2.o");
  }
  ATT_MEM({ TA_NULL, 0xf0000000, 0x1000000 });
  ATT_MEM({ TA_NULL, 0xf1000000, 0x1000000 },
					{ TACP_SHARED, TACP(DOM1), TACP(DOM1), TACP_SHARED });
  ACV_DOM({ TACP_SHARED, TACP(DOM1), TACP(DOM1), TACP_SHARED });
}

KERNEL_DOMAIN {
  CLASS(CLS_PRC1) {
	ATT_SEC(".noinit_kernel", { TA_NOINITSEC, "RAM" });
  }
}

DEF_SCY({ 10000 });
CRE_SOM(SOM1, { TA_INISOM, SOM1 });
CLASS(CLS_PRC1) {
	ATT_TWD({ DOM1, SOM1, 1, 4000 });
	ATT_TWD({ DOM1, SOM1, 2, 4000 });
}
CRE_SOM(SOM2, { TA_NULL, SOM1 });
CLASS(CLS_PRC1) {
	ATT_TWD({ DOM1, SOM2, 1, 5000 });
	ATT_TWD({ DOM1, SOM2, 2, 3000 });
}
ATT_MOD("libc.a");
