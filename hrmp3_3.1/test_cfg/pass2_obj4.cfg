/*
 *		カーネルオブジェクト関連の静的APIのパス2でのエラー検出のテスト(4)
 *
 *  $Id: pass2_obj4.cfg 645 2019-12-09 16:50:28Z ertl-hiro $
 */

#include "cfg_common.h"

KERNEL_DOMAIN {
  CLASS(CLS_ALL_PRC1) {
	CRE_TSK(TASK1, { TA_NULL, 1, task1, MID_PRIORITY, STACK_SIZE, NULL });

	/* 生成する割込みサービスルーチンの属するクラスの割付け可能プロセッ */
	/* サが，intnoで指定した割込み要求ラインが接続されたプロセッサの集 */
	/* 合に含まれていない場合［NGKI3016］*/
	CFG_INT(INTNO1, { TA_NULL, TMAX_INTPRI });
	CRE_ISR(ISR1, { TA_NULL, 1, INTNO1, isr1, 1 });

	CFG_INT(INTNO2, { TA_NULL, TMAX_INTPRI });
	CFG_INT(INTNO4, { TA_NULL, TMAX_INTPRI });
  }

  CLASS(CLS_PRC1) {
	/* intnoで指定した割込み要求ラインが，生成する割込みサービスルーチ */
	/* ンと異なるクラスに属する場合［NGKI5142］*/
	CRE_ISR(ISR2, { TA_NULL, 1, INTNO2, isr2, 1 });
  }

  CLASS(CLS_PRC2) {
	/* 登録する割込みハンドラの属するクラスの初期割付けプロセッサが，そ */
	/* の割込みが要求されるプロセッサでない場合［NGKI3073］*/
	CFG_INT(INTNO3, { TA_NULL, TMAX_INTPRI });
	DEF_INH(INHNO3, { TA_NULL, int3_handler });
  }

  CLASS(CLS_PRC1) {
	/* 対象割込みハンドラ番号に対応する割込み要求ラインが，登録する割込 */
	/* みハンドラと異なるクラスに属する場合［NGKI5141］*/
	DEF_INH(INHNO4, { TA_NULL, int4_handler });
  }

  CLASS(CLS_PRC2) {
	/* 登録するCPU例外ハンドラの属するクラスの初期割付けプロセッサが， */
	/* そのCPU例外が発生するプロセッサでない場合［NGKI3146］*/
	DEF_EXC(CPUEXC1, { TA_NULL, cpuexc1_handler });
  }

  CLASS(CLS_LARGE) {
	/* 属するクラスの指定が有効範囲外［NGKI5128］*/
	DEF_ICS({ 10 * STACK_SIZE, istack });
  }

  CLASS(CLS_PRC2) {
	DEF_ICS({ 10 * STACK_SIZE, NULL });
  }

  CLASS(CLS_ALL_PRC2) {
	/* そのプロセッサに対してすでに非タスクコンテキスト用スタック領域 */
	/* が設定されている場合（異なるクラスの囲みの中にある場合）*/
	/* ［NGKI3227］*/
	DEF_ICS({ 10 * STACK_SIZE, NULL });
  }
}
